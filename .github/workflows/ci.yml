name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: |
        go mod download
        go mod verify

    - name: Build
      run: |
        go build -v ./...
        cd cmd/stoolap && go build -v .

    - name: Test with coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create coverage directory
        mkdir -p coverage
        
        # Run unit tests with cross-package coverage
        go test -v -race -coverprofile=coverage/unit.txt -covermode=atomic -coverpkg=./...,./internal/...,./pkg/... ./internal/... ./pkg/...
        
        # Run integration tests with coverage
        go test -v -tags=integration -coverprofile=coverage/integration.txt -covermode=atomic -coverpkg=./...,./internal/...,./pkg/... ./test/... || true
        
        # Merge coverage files
        echo "mode: atomic" > coverage.txt
        if [ -f coverage/unit.txt ]; then
          tail -n +2 coverage/unit.txt >> coverage.txt
        fi
        if [ -f coverage/integration.txt ]; then
          tail -n +2 coverage/integration.txt >> coverage.txt
        fi
        
        # Show coverage summary
        go tool cover -func=coverage.txt | tail -1

    - name: Test with coverage (Other OS)
      if: matrix.os != 'ubuntu-latest'
      run: go test -v -race -coverprofile coverage.txt -covermode atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      with:
        sarif_file: results.sarif

  license:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check License Headers
      run: |
        # Check that all .go files have the Apache license header
        missing_license=""
        for file in $(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*"); do
          if ! grep -q "Copyright.*Stoolap Contributors" "$file"; then
            missing_license="$missing_license\n$file"
          fi
        done
        if [ ! -z "$missing_license" ]; then
          echo "Files missing license header:$missing_license"
          exit 1
        fi

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd cmd/stoolap
        go build -o stoolap-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stoolap-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cmd/stoolap/stoolap-${{ matrix.goos }}-${{ matrix.goarch }}*
